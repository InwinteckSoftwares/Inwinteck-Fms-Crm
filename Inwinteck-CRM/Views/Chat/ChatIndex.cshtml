@{
    ViewBag.Title = "Chat || Index";
    Layout = null;
    var ticketId = ViewBag.TicketId;
}

<title>Chat</title>
<link rel="stylesheet" href="~/assets/css/chat.css">
<!-- Include Bootstrap CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<!-- Include Bootstrap Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<!-- Include Moment.js -->
<script src="~/assets/js/moment.min.js"></script>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f4;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 90vh;
        width: 95vw;
        max-width: 1000px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .chat-header {
        background-color: #075E54;
        color: #fff;
        padding: 15px;
        text-align: center;
        font-size: 1.5em;
    }

    .chat-body {
        flex: 1;
        padding: 15px;
        overflow-y: auto;
        background-color: #ece5dd;
    }

    .chat-message {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
    }

        .chat-message.sent .message-content {
            background-color: #d4f0fc;
        }

        .chat-message.received .message-content {
            background-color: #f1f1f1;
        }

        .chat-message.sent .message-time {
            color: #007bff;
        }

        .chat-message.received .message-time {
            color: #555;
        }

    .date-divider {
        text-align: center;
        margin: 10px 0;
        font-size: 0.9em;
        color: #888;
    }

    .message-time {
        align-self: flex-end;
        font-size: 0.8em;
        color: #999;
        margin-top: 2px;
    }

    .chat-footer {
        display: flex;
        padding: 10px;
        background-color: #f0f0f0;
        border-top: 1px solid #e0e0e0;
        align-items: center;
    }

        .chat-footer .input-group {
            display: flex;
            width: 100%;
            align-items: center;
        }

    .chat-input {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 20px;
        margin-right: 10px;
        outline: none;
        transition: all 0.3s ease;
    }

        .chat-input:focus {
            border-color: #075E54;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }

    .chat-send-btn {
        padding: 10px 20px;
        background-color: #075E54;
        color: #fff;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .chat-send-btn:hover {
            background-color: #128C7E;
        }

    .image-upload-icon, .video-upload-icon {
        cursor: pointer;
        margin-right: 10px;
        font-size: 1.5em;
        color: #075E54;
        transition: color 0.3s ease;
    }

        .image-upload-icon:hover, .video-upload-icon:hover {
            color: #128C7E;
        }

    .chat-footer > * {
        margin: 0 5px;
    }

    .chat-list {
        display: flex;
        flex-direction: column;
    }

    .chat-image {
        max-width: 100%;
        max-height: 200px;
        height: auto;
        border-radius: 8px;
        margin-top: 10px;
    }

    .chat-video {
        max-width: 100%;
        max-height: 300px;
        height: auto;
        border-radius: 8px;
        margin-top: 10px;
    }

    #imageInput, #videoInput {
        display: none;
    }

    .date-divider {
        text-align: center;
        margin: 20px 0;
        position: relative;
        width: 100%;
    }

        .date-divider span {
            background-color: #ece5dd;
            padding: 5px 10px;
            border-radius: 10px;
            font-size: 0.85em;
            color: #666;
        }

        .date-divider::before {
            content: "";
            position: absolute;
            top: 50%;
            left: 10px;
            right: 10px;
            border-top: 1px solid #ccc;
            z-index: -1;
        }

    /* Custom Scrollbar */
    .chat-body::-webkit-scrollbar {
        width: 10px;
    }

    .chat-body::-webkit-scrollbar-thumb {
        background-color: #075E54;
        border-radius: 10px;
    }

    .chat-body::-webkit-scrollbar-track {
        background-color: #ece5dd;
    }

    .message-content {
        display: inline-block;
        padding: 5px 10px;
        background-color: #f1f1f1;
        border-radius: 5px;
    }

    .file-name {
        margin-left: 10px;
        font-size: 0.9em;
        color: #555;
        display: none; /* Initially hidden */
    }

    .sr-helpdesk-manager-tools {
        margin-top: 20px;
        padding: 10px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
    }

        .sr-helpdesk-manager-tools h3 {
            margin-top: 0;
        }

    .user-select {
        width: 100%;
        margin-bottom: 10px;
    }

</style>
<div class="chat-container">
    <div class="chat-header">
        <h2>Chat # <b><span id="ticketNumber"></span></b></h2>
    </div>
    <div class="chat-body chat-list" id="discussion">
        <!-- Messages will be appended here dynamically -->
    </div>
    <div class="chat-footer">
        @using (Html.BeginForm())
        {
            <div class="input-group">
                <input type="hidden" id="ticketId" name="ticketId" value="@ViewBag.TicketId" />
                <input type="hidden" id="displayname" value="@ViewBag.DisplayName" />
                <input type="hidden" id="iwtTicketNo" value="@ViewBag.iwtTicketNo" />

                <!-- Chat message input -->
                <input type="text" id="message" placeholder="Enter your message" class="chat-input" />

                <!-- Image upload icon and input -->
                <i class="fas fa-image image-upload-icon" onclick="document.getElementById('imageInput').click();"></i>
                <input type="file" id="imageInput" accept="image/*" style="display: none;" />
                <span id="imageFileName" class="file-name"></span>

                <!-- Video upload icon and input -->
                <i class="fas fa-video video-upload-icon" onclick="document.getElementById('videoInput').click();"></i>
                <input type="file" id="videoInput" accept="video/*" style="display: none;" />
                <span id="videoFileName" class="file-name"></span>

                <!-- Send message button -->
                <button type="button" id="send" class="chat-send-btn">Send</button>
            </div>
        }


    </div>
</div>
<div class="sr-helpdesk-manager-tools">
    <h3>Manage Users</h3>
    <div>
        <label for="userIdToAdd">Add User to Chat Group:</label>
        <select id="userIdToAdd" class="user-select">
            <!-- This will be populated with users -->
        </select>
        <button type="button" id="addUserButton">Add User</button>
    </div>

    <div>
        <label for="userIdToRemove">Remove User from Chat Group:</label>
        <select id="userIdToRemove" class="user-select">
            <!-- This will be populated with users already in the group -->
        </select>
        <button type="button" id="removeUserButton">Remove User</button>
    </div>
</div>


<audio id="notificationSound" src="~/assets/audio/mixkit-wrong-answer-fail-notification-946.wav" preload="auto"></audio>
<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<!-- Include Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<!-- Include SignalR JS -->
<script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
<script src="~/signalr/hubs"></script>


<script type="text/javascript">
    $(document).ready(function () {
        // Set ticket number in header
        $('#ticketNumber').text($('#iwtTicketNo').val());

        // Trigger send button click on Enter key press in message input
        $('#message').keypress(function (e) {
            if (e.which == 13) {
                $('#send').click();
                return false; // prevent form submission
            }
        });

        // Establish the connection to the SignalR hub
        var chat = $.connection.chatIndex;
        var currentUserName = $('#displayname').val();
        var ticketId = $('#ticketId').val();

        var notificationSound = document.getElementById('notificationSound'); // Add a notification sound element if needed

        // Receive text messages
        chat.client.broadcastMessage = function (messageId, name, message, timestamp) {
            appendMessage(name, message, 'text', timestamp, messageId);
            if (name !== currentUserName) {
                playNotificationSound();
            }
        };

        // Receive image messages
        chat.client.broadcastImage = function (messageId, name, imageUrl, timestamp) {
            appendMessage(name, imageUrl, 'image', timestamp, messageId);
            if (name !== currentUserName) {
                playNotificationSound();
            }
        };

        // Receive video messages
        chat.client.broadcastVideo = function (messageId, name, videoUrl, timestamp) {
            appendMessage(name, videoUrl, 'video', timestamp, messageId);
            if (name !== currentUserName) {
                playNotificationSound();
            }
        };

        // Handle message deletion
        chat.client.broadcastDeleteMessage = function (messageId) {
            $('#message-' + messageId).remove();
        };

        // Append message to the chat
        function appendMessage(name, content, type, timestamp, messageId) {
            var encodedName = $('<div />').text(name).html();
            var messageClass = (name === currentUserName) ? 'chat-message sent' : 'chat-message received';
            var messageContent;

            var dateObj = new Date(timestamp);
            if (isNaN(dateObj.getTime())) {
                dateObj = new Date(); // Fallback to current time if parsing failed
            }
            var formattedTime = new Intl.DateTimeFormat('default', {
                hour: '2-digit',
                minute: '2-digit',
            }).format(dateObj);

            if (type === 'text') {
                var encodedMessage = $('<div />').text(content).html();
                messageContent = `<div class="message-content"><strong>${encodedName}</strong>:&nbsp;&nbsp;${encodedMessage}</div>
                                  <div class="message-time">${formattedTime}</div>`;
            } else if (type === 'image') {
                messageContent = `<div class="message-content"><strong>${encodedName}</strong>:<br>
                                  <img src="${content}" class="chat-image" onerror="this.onerror=null; this.src='/assets/uploadedChatImages/default.png';" /></div>
                                  <div class="message-time">${formattedTime}</div>`;
            } else if (type === 'video') {
                messageContent = `<div class="message-content"><strong>${encodedName}</strong>:<br>
                                  <video src="${content}" class="chat-video" controls></video></div>
                                  <div class="message-time">${formattedTime}</div>`;
            }

            var lastMessageDate = $('#discussion .date-divider').last().find('span').text();
            var currentDate = dateObj.toLocaleDateString();

            if (currentDate !== lastMessageDate) {
                $('#discussion').append(`<div class="date-divider"><span>${currentDate}</span></div>`);
            }

            // Create delete button for the current user's messages within 10 minutes
            var deleteButton = '';
            var timeDifference = (new Date() - dateObj) / 60000; // Time difference in minutes
            if (name === currentUserName && timeDifference < 10) {
                deleteButton = `<button class="delete-message-btn" data-message-id="${messageId}" style="display:none;">Delete</button>`;
            }

            // Append the message and delete button to the discussion
            var messageElement = $(`<div class="${messageClass}" data-message-id="${messageId}" id="message-${messageId}">${messageContent}${deleteButton}</div>`);
            $('#discussion').append(messageElement);

            // Scroll to the bottom of the discussion
            $('#discussion').scrollTop($('#discussion')[0].scrollHeight);

            // Show the delete button on message click
            messageElement.on('click', function () {
                $(this).find('.delete-message-btn').toggle(); // Toggle visibility of delete button
            });

            // Hide delete button when clicking outside the message
            $(document).on('click', function (e) {
                if (!$(e.target).closest(`#message-${messageId}`).length) {
                    $(`#message-${messageId}`).find('.delete-message-btn').hide();
                }
            });

            // Bind the delete button click event
            messageElement.find('.delete-message-btn').click(function () {
                var messageId = $(this).data('message-id');
                deleteMessage(messageId);
            });
        }

        // Function to play the notification sound
        function playNotificationSound() {
            if (notificationSound) {
                notificationSound.play();
            }
        }

        // Handle media messages (image/video)
        function handleMediaMessage(inputElement, uploadAction, chatMethod, successCallback) {
            var formData = new FormData();
            formData.append('file', inputElement.files[0]);

            $.ajax({
                url: uploadAction,
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    if (data.success) {
                        chatMethod(data.Url, ticketId, currentUserName);
                        successCallback();
                    } else {
                        alert('Error uploading media: ' + data.message);
                    }
                },
                error: function (error) {
                    alert('Error uploading media: ' + error.statusText);
                }
            });
        }

        // Start the SignalR connection
        $.connection.hub.start().done(function () {
            // Join the chat group (identified by ticketId)
            chat.server.joinChatGroup(ticketId);

            // Send message on send button click
            $('#send').click(function () {
                var message = $('#message').val();
                var imageInput = document.getElementById('imageInput');
                var videoInput = document.getElementById('videoInput');

                // Handle image message
                if (imageInput.files.length > 0) {
                    handleMediaMessage(imageInput, '@Url.Action("UploadImage", "Chat")', chat.server.sendImageChatIndex, function () {
                        $('#message').val('').focus();
                        imageInput.value = ''; // Clear the file input
                        $('#imageFileName').hide();
                    });
                }
                // Handle video message
                else if (videoInput.files.length > 0) {
                    handleMediaMessage(videoInput, '@Url.Action("UploadVideo", "Chat")', chat.server.sendVideoChatIndex, function () {
                        $('#message').val('').focus();
                        videoInput.value = ''; // Clear the file input
                        $('#videoFileName').hide();
                    });
                }
                // Handle text message
                else if (message.trim() !== "") {
                    chat.server.sendChatIndex(message, ticketId, currentUserName);
                    $('#message').val('').focus();
                }
            });
        }).fail(function (error) {
            alert('Could not connect to SignalR hub: ' + error.statusText);
        });

        // Leave the chat group when navigating away from the page
        $(window).on('beforeunload', function () {
            chat.server.leaveChatGroup(ticketId);
        });

        // Load previous messages if a ticket ID is available
        var ticketIdVal = $('#ticketId').val();
        if (ticketIdVal) {
            $.getJSON('@Url.Action("GetMessages", "Chat")', { ticketId: ticketIdVal }, function (data) {
                $.each(data, function (index, message) {
                    var userName = message.UserName;
                    var content = message.Message;
                    var messageType = message.MessageType;
                    var timestamp = message.Timestamp;
                    appendMessage(userName, content, messageType, timestamp, message.MessageId);
                });
            }).fail(function (error) {
                alert('Error loading messages: ' + error.statusText);
            });
        }

        // Function to delete a message
        function deleteMessage(messageId) {
            $.ajax({
                url: '@Url.Action("DeleteMessageChatIndex", "Chat")',
                type: 'POST',
                data: { messageId: messageId },
                success: function (response) {
                    if (response.success) {
                        // Broadcast the deletion to all clients
                        chat.server.broadcastDeleteMessage(messageId);
                    } else {
                        alert(response.message);
                    }
                },
                error: function (error) {
                    alert('Error deleting message: ' + error.statusText);
                }
            });
        }
    });

    $(document).ready(function () {
    // Assuming you have a method to fetch users and populate the dropdowns
    function populateUserDropdowns() {
        // Fetch users from server and populate select options
        $.getJSON('@Url.Action("GetAllUsers", "Chat")', function(users) {
            // Populate the 'Add User' dropdown
            $('#userIdToAdd').empty();
            $.each(users, function (index, user) {
                $('#userIdToAdd').append(`<option value="${user.userId}">${user.userName}</option>`);
            });

            // Populate the 'Remove User' dropdown
            $('#userIdToRemove').empty();
            $.each(users, function (index, user) {
                $('#userIdToRemove').append(`<option value="${user.userId}">${user.userName}</option>`);
            });
        });
    }

    // Call the function to populate the dropdowns
    populateUserDropdowns();

    // Add User Button Click Handler
    $('#addUserButton').click(function () {
        var userIdToAdd = $('#userIdToAdd').val();
        var ticketId = $('#ticketId').val();

        // AJAX request to add user to chat group
        $.ajax({
            url: '@Url.Action("AddUserToChatGroup", "Chat")',
            type: 'POST',
            data: { ticketId: ticketId, userId: userIdToAdd },
            success: function (response) {
                alert('User added to chat group successfully.');
                populateUserDropdowns(); // Refresh the dropdowns
            },
            error: function (error) {
                alert('Error adding user to chat group: ' + error.statusText);
            }
        });
    });

    // Remove User Button Click Handler
    $('#removeUserButton').click(function () {
        var userIdToRemove = $('#userIdToRemove').val();
        var ticketId = $('#ticketId').val();

        // AJAX request to remove user from chat group
        $.ajax({
            url: '@Url.Action("RemoveUserFromChatGroup", "Chat")',
            type: 'POST',
            data: { ticketId: ticketId, userId: userIdToRemove },
            success: function (response) {
                alert('User removed from chat group successfully.');
                populateUserDropdowns(); // Refresh the dropdowns
            },
            error: function (error) {
                alert('Error removing user from chat group: ' + error.statusText);
            }
        });
    });
});

</script>









